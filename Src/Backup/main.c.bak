/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  *
  * Copyright (c) 2017 STMicroelectronics International N.V. 
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without 
  * modification, are permitted, provided that the following conditions are met:
  *
  * 1. Redistribution of source code must retain the above copyright notice, 
  *    this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  * 3. Neither the name of STMicroelectronics nor the names of other 
  *    contributors to this software may be used to endorse or promote products 
  *    derived from this software without specific written permission.
  * 4. This software, including modifications and/or derivative works of this 
  *    software, must execute solely and exclusively on microcontroller or
  *    microprocessor devices manufactured by or for STMicroelectronics.
  * 5. Redistribution and use of this software other than as permitted under 
  *    this license is void and will automatically terminate your rights under 
  *    this license. 
  *
  * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f4xx_hal.h"
#include "dma.h"
#include "fatfs.h"
#include "i2c.h"
#include "sdio.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "ili9340.h"
#include "makise_test.h"
#include "makise_primitives.h"
#include <math.h>
/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#define      LSM303_CTRL0              0x1F  
#define      LSM303_CTRL1              0x20  
#define      LSM303_CTRL2              0x21  
#define      LSM303_CTRL3              0x22  
#define      LSM303_CTRL4              0x23  
#define      LSM303_CTRL5              0x24  
#define      LSM303_CTRL6              0x25  
#define      LSM303_CTRL7              0x26 
#define      LSM303_WHO_AM_I           0x0F  
#define      LSM303_D_OUT_X_L_M        0x08
#define 	M_PI   3.14159265358979323846 /* pi */
uint8_t ReadRegister(uint8_t Register)
{
    uint8_t result = 0;
    HAL_I2C_Master_Transmit(&hi2c1, 0x3a, &Register, 1, 100);
    HAL_I2C_Master_Receive(&hi2c1, 0x3a, &result, 1, 100);

    return result;
}
void WriteRegister(uint8_t Register, uint8_t val)
{
    uint8_t d[] = {Register, val};
    HAL_I2C_Master_Transmit(&hi2c1, 0x3a, d, 2, 100);
}

float ang = 0;
void lsm303_read()
{
    uint8_t reg = LSM303_D_OUT_X_L_M | (1 << 7);
    HAL_I2C_Master_Transmit(&hi2c1, 0x3a, &reg, 1, 100);

    HAL_Delay(10);
    
    uint8_t r[6];
    HAL_I2C_Master_Receive(&hi2c1, 0x3a, r, 6, 100);

    int16_t x = (int16_t)(r[1] << 8 | r[0]);
    int16_t y = (int16_t)(r[3] << 8 | r[2]);
    int16_t z = (int16_t)(r[5] << 8 | r[4]);
    ang = atan2(y,x);
    printf("c %04d %04d %04d %f\n", x, y, z, ang*180.0/M_PI);
}


MakiseGUI* mgui;
void _mt_d(MakiseGUI* gui)
{
//    makise_d_clear(mgui->buffer, 0);
    //makise_d_circle_filled(mgui->buffer, 50, (HAL_GetTick() % 500)/2 + 50, 40, 1, 3);
    makise_d_line(mgui->buffer, 120, 160, cos(ang) * 100 + 120, sin(ang) * 100 + 160, 1);
    //makise_d_rect_filled(mgui->buffer, 170, 50, 50, 50, 1, 2);

    //makise_d_string(mgui->buffer, "KEEEK", 100, 30, &F_Arial12, 2);    
    makise_g_host_call(host, M_G_CALL_DRAW);
}
#define kdat GPIOB, GPIO_PIN_5
#define kclk GPIOB, GPIO_PIN_4
#define klatch GPIOB, GPIO_PIN_3
void hc595(uint8_t val)
{
    HAL_GPIO_WritePin(klatch, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(kclk,   GPIO_PIN_RESET);
    
    for(uint8_t i = 0; i < 8; i++)
    {
	HAL_GPIO_WritePin(kdat,   ((val >> i) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
//	printf("595 %d %d\n", i, ((val >> i) & 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	HAL_GPIO_WritePin(kclk,   GPIO_PIN_SET);
	HAL_Delay(1);
	HAL_GPIO_WritePin(kclk,   GPIO_PIN_RESET);
	HAL_Delay(1);
    }

    HAL_GPIO_WritePin(klatch,   GPIO_PIN_SET);
}
/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SDIO_SD_Init();
  MX_SPI1_Init();
  MX_TIM3_Init();
  MX_FATFS_Init();
  MX_USART6_UART_Init();
  MX_I2C1_Init();

  /* USER CODE BEGIN 2 */
  hc595(0);

  //WriteRegister(LSM303_CTRL2, 0x00);
  //WriteRegister(LSM303_CTRL1, 0x57);
  WriteRegister(LSM303_CTRL5, 0b01110000);
  WriteRegister(LSM303_CTRL6, 0x20);
  WriteRegister(LSM303_CTRL7, 0x00);

  printf("acc %d\n", ReadRegister(LSM303_WHO_AM_I));


//  printf("%d\n", Arial_12_SymbolTable[4]);
  mgui = mt_start();
  mgui->draw = &_mt_d;
//  printf("%d\n", Arial_12_SymbolTable[2]);
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      lsm303_read();
//      hc595(l+=0b00010000);
      HAL_Delay(30);
      
      
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
  /* USER CODE END Error_Handler */ 
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
