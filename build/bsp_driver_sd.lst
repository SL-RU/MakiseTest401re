ARM GAS  /tmp/cc0zaH7r.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bsp_driver_sd.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.BSP_SD_Init,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	BSP_SD_Init
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	BSP_SD_Init:
  27              	.LFB126:
  28              		.file 1 "Src/bsp_driver_sd.c"
   1:Src/bsp_driver_sd.c **** /**
   2:Src/bsp_driver_sd.c ****  ******************************************************************************
   3:Src/bsp_driver_sd.c ****   * @file    bsp_driver_sd.c for F4 (based on stm324x9i_eval_sd.c)
   4:Src/bsp_driver_sd.c ****   * @brief   This file includes a generic uSD card driver.
   5:Src/bsp_driver_sd.c ****   ******************************************************************************
   6:Src/bsp_driver_sd.c ****   *
   7:Src/bsp_driver_sd.c ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
   8:Src/bsp_driver_sd.c ****   * All rights reserved.
   9:Src/bsp_driver_sd.c ****   *
  10:Src/bsp_driver_sd.c ****   * Redistribution and use in source and binary forms, with or without 
  11:Src/bsp_driver_sd.c ****   * modification, are permitted, provided that the following conditions are met:
  12:Src/bsp_driver_sd.c ****   *
  13:Src/bsp_driver_sd.c ****   * 1. Redistribution of source code must retain the above copyright notice, 
  14:Src/bsp_driver_sd.c ****   *    this list of conditions and the following disclaimer.
  15:Src/bsp_driver_sd.c ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  16:Src/bsp_driver_sd.c ****   *    this list of conditions and the following disclaimer in the documentation
  17:Src/bsp_driver_sd.c ****   *    and/or other materials provided with the distribution.
  18:Src/bsp_driver_sd.c ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  19:Src/bsp_driver_sd.c ****   *    contributors to this software may be used to endorse or promote products 
  20:Src/bsp_driver_sd.c ****   *    derived from this software without specific written permission.
  21:Src/bsp_driver_sd.c ****   * 4. This software, including modifications and/or derivative works of this 
  22:Src/bsp_driver_sd.c ****   *    software, must execute solely and exclusively on microcontroller or
  23:Src/bsp_driver_sd.c ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  24:Src/bsp_driver_sd.c ****   * 5. Redistribution and use of this software other than as permitted under 
  25:Src/bsp_driver_sd.c ****   *    this license is void and will automatically terminate your rights under 
  26:Src/bsp_driver_sd.c ****   *    this license. 
  27:Src/bsp_driver_sd.c ****   *
  28:Src/bsp_driver_sd.c ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  29:Src/bsp_driver_sd.c ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  30:Src/bsp_driver_sd.c ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
ARM GAS  /tmp/cc0zaH7r.s 			page 2


  31:Src/bsp_driver_sd.c ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  32:Src/bsp_driver_sd.c ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  33:Src/bsp_driver_sd.c ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  34:Src/bsp_driver_sd.c ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  35:Src/bsp_driver_sd.c ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  36:Src/bsp_driver_sd.c ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  37:Src/bsp_driver_sd.c ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  38:Src/bsp_driver_sd.c ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  39:Src/bsp_driver_sd.c ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  40:Src/bsp_driver_sd.c ****   *
  41:Src/bsp_driver_sd.c ****   ******************************************************************************
  42:Src/bsp_driver_sd.c ****   */
  43:Src/bsp_driver_sd.c **** #define BUS_4BITS 1
  44:Src/bsp_driver_sd.c **** /* USER CODE BEGIN 0 */
  45:Src/bsp_driver_sd.c **** /* Includes ------------------------------------------------------------------*/
  46:Src/bsp_driver_sd.c **** #include "bsp_driver_sd.h"
  47:Src/bsp_driver_sd.c **** 
  48:Src/bsp_driver_sd.c **** /* Extern variables ---------------------------------------------------------*/ 
  49:Src/bsp_driver_sd.c ****   
  50:Src/bsp_driver_sd.c **** extern SD_HandleTypeDef hsd;
  51:Src/bsp_driver_sd.c **** extern HAL_SD_CardInfoTypedef SDCardInfo; 
  52:Src/bsp_driver_sd.c **** 
  53:Src/bsp_driver_sd.c **** /**
  54:Src/bsp_driver_sd.c ****   * @brief  Initializes the SD card device.
  55:Src/bsp_driver_sd.c ****   * @retval SD status
  56:Src/bsp_driver_sd.c ****   */
  57:Src/bsp_driver_sd.c **** uint8_t BSP_SD_Init(void)
  58:Src/bsp_driver_sd.c **** {
  29              		.loc 1 58 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 00B5     		push	{lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 4
  37              		.cfi_offset 14, -4
  38 0002 83B0     		sub	sp, sp, #12
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41              	.LBB4:
  42              	.LBB5:
  59:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  60:Src/bsp_driver_sd.c ****   /* Check if the SD card is plugged in the slot */
  61:Src/bsp_driver_sd.c ****   if (BSP_SD_IsDetected() != SD_PRESENT)
  62:Src/bsp_driver_sd.c ****   {
  63:Src/bsp_driver_sd.c ****     return MSD_ERROR;
  64:Src/bsp_driver_sd.c ****   }
  65:Src/bsp_driver_sd.c ****   /* HAL SD initialization */
  66:Src/bsp_driver_sd.c ****   sd_state = HAL_SD_Init(&hsd, &SDCardInfo);
  67:Src/bsp_driver_sd.c **** #ifdef BUS_4BITS
  68:Src/bsp_driver_sd.c ****   /* Configure SD Bus width */
  69:Src/bsp_driver_sd.c ****   if (sd_state == MSD_OK)
  70:Src/bsp_driver_sd.c ****   {
  71:Src/bsp_driver_sd.c ****     /* Enable wide operation */
  72:Src/bsp_driver_sd.c ****     if (HAL_SD_WideBusOperation_Config(&hsd, SDIO_BUS_WIDE_4B) != SD_OK)
  73:Src/bsp_driver_sd.c ****     {
ARM GAS  /tmp/cc0zaH7r.s 			page 3


  74:Src/bsp_driver_sd.c ****       sd_state = MSD_ERROR;
  75:Src/bsp_driver_sd.c ****     }
  76:Src/bsp_driver_sd.c ****     else
  77:Src/bsp_driver_sd.c ****     {
  78:Src/bsp_driver_sd.c ****       sd_state = MSD_OK;
  79:Src/bsp_driver_sd.c ****     }
  80:Src/bsp_driver_sd.c ****   }
  81:Src/bsp_driver_sd.c **** #endif
  82:Src/bsp_driver_sd.c ****   return sd_state;
  83:Src/bsp_driver_sd.c **** }
  84:Src/bsp_driver_sd.c **** 
  85:Src/bsp_driver_sd.c **** /**
  86:Src/bsp_driver_sd.c ****   * @brief  Configures Interrupt mode for SD detection pin.
  87:Src/bsp_driver_sd.c ****   * @retval Returns 0 in success otherwise 1. 
  88:Src/bsp_driver_sd.c ****   */
  89:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ITConfig(void)
  90:Src/bsp_driver_sd.c **** {  
  91:Src/bsp_driver_sd.c ****   /* TBI: add user code here depending on the hardware configuration used */
  92:Src/bsp_driver_sd.c ****   
  93:Src/bsp_driver_sd.c ****   return (uint8_t)0;
  94:Src/bsp_driver_sd.c **** }
  95:Src/bsp_driver_sd.c **** 
  96:Src/bsp_driver_sd.c **** /** @brief  SD detect IT treatment
  97:Src/bsp_driver_sd.c ****   */
  98:Src/bsp_driver_sd.c **** void BSP_SD_DetectIT(void)
  99:Src/bsp_driver_sd.c **** {
 100:Src/bsp_driver_sd.c ****   /* TBI: add user code here depending on the hardware configuration used */
 101:Src/bsp_driver_sd.c **** }
 102:Src/bsp_driver_sd.c **** 
 103:Src/bsp_driver_sd.c **** /** @brief  SD detect IT detection callback
 104:Src/bsp_driver_sd.c ****   */
 105:Src/bsp_driver_sd.c **** __weak void BSP_SD_DetectCallback(void)
 106:Src/bsp_driver_sd.c **** {
 107:Src/bsp_driver_sd.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 108:Src/bsp_driver_sd.c ****      the BSP_SD_DetectCallback could be implemented in the user file
 109:Src/bsp_driver_sd.c ****   */ 
 110:Src/bsp_driver_sd.c **** }
 111:Src/bsp_driver_sd.c **** 
 112:Src/bsp_driver_sd.c **** /**
 113:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
 114:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 115:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read  
 116:Src/bsp_driver_sd.c ****   * @param  BlockSize: SD card data block size, that should be 512
 117:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read 
 118:Src/bsp_driver_sd.c ****   * @retval SD status
 119:Src/bsp_driver_sd.c ****   */
 120:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumOfBlo
 121:Src/bsp_driver_sd.c **** {
 122:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 123:Src/bsp_driver_sd.c ****   if(HAL_SD_ReadBlocks(&hsd, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)
 124:Src/bsp_driver_sd.c ****   {
 125:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 126:Src/bsp_driver_sd.c ****   }
 127:Src/bsp_driver_sd.c ****   else
 128:Src/bsp_driver_sd.c ****   {
 129:Src/bsp_driver_sd.c ****     sd_state = MSD_OK;
 130:Src/bsp_driver_sd.c ****   }
ARM GAS  /tmp/cc0zaH7r.s 			page 4


 131:Src/bsp_driver_sd.c ****   return sd_state;  
 132:Src/bsp_driver_sd.c **** }
 133:Src/bsp_driver_sd.c **** 
 134:Src/bsp_driver_sd.c **** /**
 135:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode. 
 136:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 137:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written  
 138:Src/bsp_driver_sd.c ****   * @param  BlockSize: SD card data block size, that should be 512
 139:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 140:Src/bsp_driver_sd.c ****   * @retval SD status
 141:Src/bsp_driver_sd.c ****   */
 142:Src/bsp_driver_sd.c **** uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t NumOfB
 143:Src/bsp_driver_sd.c **** {
 144:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 145:Src/bsp_driver_sd.c ****   if(HAL_SD_WriteBlocks(&hsd, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)  
 146:Src/bsp_driver_sd.c ****   {
 147:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 148:Src/bsp_driver_sd.c ****   }
 149:Src/bsp_driver_sd.c ****   else
 150:Src/bsp_driver_sd.c ****   {
 151:Src/bsp_driver_sd.c ****     sd_state = MSD_OK;
 152:Src/bsp_driver_sd.c ****   }
 153:Src/bsp_driver_sd.c ****   return sd_state;  
 154:Src/bsp_driver_sd.c **** }
 155:Src/bsp_driver_sd.c **** 
 156:Src/bsp_driver_sd.c **** /**
 157:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 158:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 159:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read  
 160:Src/bsp_driver_sd.c ****   * @param  BlockSize: SD card data block size, that should be 512
 161:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read 
 162:Src/bsp_driver_sd.c ****   * @retval SD status
 163:Src/bsp_driver_sd.c ****   */
 164:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint64_t ReadAddr, uint32_t BlockSize, uint32_t NumO
 165:Src/bsp_driver_sd.c **** {
 166:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 167:Src/bsp_driver_sd.c ****   
 168:Src/bsp_driver_sd.c ****   /* Read block(s) in DMA transfer mode */
 169:Src/bsp_driver_sd.c ****   if(HAL_SD_ReadBlocks_DMA(&hsd, pData, ReadAddr, BlockSize, NumOfBlocks) != SD_OK)  
 170:Src/bsp_driver_sd.c ****   {
 171:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 172:Src/bsp_driver_sd.c ****   }
 173:Src/bsp_driver_sd.c ****   
 174:Src/bsp_driver_sd.c ****   /* Wait until transfer is complete */
 175:Src/bsp_driver_sd.c ****   if(sd_state == MSD_OK)
 176:Src/bsp_driver_sd.c ****   {
 177:Src/bsp_driver_sd.c ****     if(HAL_SD_CheckReadOperation(&hsd, (uint32_t)SD_DATATIMEOUT) != SD_OK)  
 178:Src/bsp_driver_sd.c ****     {
 179:Src/bsp_driver_sd.c ****       sd_state = MSD_ERROR;
 180:Src/bsp_driver_sd.c ****     }
 181:Src/bsp_driver_sd.c ****     else
 182:Src/bsp_driver_sd.c ****     {
 183:Src/bsp_driver_sd.c ****       sd_state = MSD_OK;
 184:Src/bsp_driver_sd.c ****     }
 185:Src/bsp_driver_sd.c ****   }
 186:Src/bsp_driver_sd.c ****   
 187:Src/bsp_driver_sd.c ****   return sd_state; 
ARM GAS  /tmp/cc0zaH7r.s 			page 5


 188:Src/bsp_driver_sd.c **** }
 189:Src/bsp_driver_sd.c **** 
 190:Src/bsp_driver_sd.c **** /**
 191:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 192:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 193:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written  
 194:Src/bsp_driver_sd.c ****   * @param  BlockSize: SD card data block size, that should be 512
 195:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write 
 196:Src/bsp_driver_sd.c ****   * @retval SD status
 197:Src/bsp_driver_sd.c ****   */
 198:Src/bsp_driver_sd.c **** uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint64_t WriteAddr, uint32_t BlockSize, uint32_t Nu
 199:Src/bsp_driver_sd.c **** {
 200:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 201:Src/bsp_driver_sd.c ****   
 202:Src/bsp_driver_sd.c ****   /* Write block(s) in DMA transfer mode */
 203:Src/bsp_driver_sd.c ****   if(HAL_SD_WriteBlocks_DMA(&hsd, pData, WriteAddr, BlockSize, NumOfBlocks) != SD_OK)  
 204:Src/bsp_driver_sd.c ****   {
 205:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 206:Src/bsp_driver_sd.c ****   }
 207:Src/bsp_driver_sd.c ****   
 208:Src/bsp_driver_sd.c ****   /* Wait until transfer is complete */
 209:Src/bsp_driver_sd.c ****   if(sd_state == MSD_OK)
 210:Src/bsp_driver_sd.c ****   {
 211:Src/bsp_driver_sd.c ****     if(HAL_SD_CheckWriteOperation(&hsd, (uint32_t)SD_DATATIMEOUT) != SD_OK)  
 212:Src/bsp_driver_sd.c ****     {
 213:Src/bsp_driver_sd.c ****       sd_state = MSD_ERROR;
 214:Src/bsp_driver_sd.c ****     }
 215:Src/bsp_driver_sd.c ****     else
 216:Src/bsp_driver_sd.c ****     {
 217:Src/bsp_driver_sd.c ****       sd_state = MSD_OK;
 218:Src/bsp_driver_sd.c ****     }
 219:Src/bsp_driver_sd.c ****   }
 220:Src/bsp_driver_sd.c ****   
 221:Src/bsp_driver_sd.c ****   return sd_state; 
 222:Src/bsp_driver_sd.c **** }
 223:Src/bsp_driver_sd.c **** 
 224:Src/bsp_driver_sd.c **** /**
 225:Src/bsp_driver_sd.c ****   * @brief  Erases the specified memory area of the given SD card. 
 226:Src/bsp_driver_sd.c ****   * @param  StartAddr: Start byte address
 227:Src/bsp_driver_sd.c ****   * @param  EndAddr: End byte address
 228:Src/bsp_driver_sd.c ****   * @retval SD status
 229:Src/bsp_driver_sd.c ****   */
 230:Src/bsp_driver_sd.c **** uint8_t BSP_SD_Erase(uint64_t StartAddr, uint64_t EndAddr)
 231:Src/bsp_driver_sd.c **** {
 232:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 233:Src/bsp_driver_sd.c ****   if(HAL_SD_Erase(&hsd, StartAddr, EndAddr) != SD_OK)  
 234:Src/bsp_driver_sd.c ****   {
 235:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 236:Src/bsp_driver_sd.c ****   }
 237:Src/bsp_driver_sd.c ****   else
 238:Src/bsp_driver_sd.c ****   {
 239:Src/bsp_driver_sd.c ****     sd_state = MSD_OK;
 240:Src/bsp_driver_sd.c ****   }
 241:Src/bsp_driver_sd.c ****   return sd_state;
 242:Src/bsp_driver_sd.c **** }
 243:Src/bsp_driver_sd.c **** 
 244:Src/bsp_driver_sd.c **** /**
ARM GAS  /tmp/cc0zaH7r.s 			page 6


 245:Src/bsp_driver_sd.c ****   * @brief  Handles SD card interrupt request.
 246:Src/bsp_driver_sd.c ****   */
 247:Src/bsp_driver_sd.c **** void BSP_SD_IRQHandler(void)
 248:Src/bsp_driver_sd.c **** {
 249:Src/bsp_driver_sd.c ****   HAL_SD_IRQHandler(&hsd);
 250:Src/bsp_driver_sd.c **** }
 251:Src/bsp_driver_sd.c **** 
 252:Src/bsp_driver_sd.c **** /**
 253:Src/bsp_driver_sd.c ****   * @brief  Handles SD DMA Tx transfer interrupt request.
 254:Src/bsp_driver_sd.c ****   */
 255:Src/bsp_driver_sd.c **** void BSP_SD_DMA_Tx_IRQHandler(void)
 256:Src/bsp_driver_sd.c **** {
 257:Src/bsp_driver_sd.c ****   HAL_DMA_IRQHandler(hsd.hdmatx); 
 258:Src/bsp_driver_sd.c **** }
 259:Src/bsp_driver_sd.c **** 
 260:Src/bsp_driver_sd.c **** /**
 261:Src/bsp_driver_sd.c ****   * @brief  Handles SD DMA Rx transfer interrupt request.
 262:Src/bsp_driver_sd.c ****   */
 263:Src/bsp_driver_sd.c **** void BSP_SD_DMA_Rx_IRQHandler(void)
 264:Src/bsp_driver_sd.c **** {
 265:Src/bsp_driver_sd.c ****   HAL_DMA_IRQHandler(hsd.hdmarx);
 266:Src/bsp_driver_sd.c **** }
 267:Src/bsp_driver_sd.c **** 
 268:Src/bsp_driver_sd.c **** /**
 269:Src/bsp_driver_sd.c ****   * @brief  Gets the current SD card data status.
 270:Src/bsp_driver_sd.c ****   * @retval Data transfer state.
 271:Src/bsp_driver_sd.c ****   *          This value can be one of the following values:
 272:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 273:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 274:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_ERROR: Data transfer error 
 275:Src/bsp_driver_sd.c ****   */
 276:Src/bsp_driver_sd.c **** HAL_SD_TransferStateTypedef BSP_SD_GetStatus(void)
 277:Src/bsp_driver_sd.c **** {
 278:Src/bsp_driver_sd.c ****   return(HAL_SD_GetStatus(&hsd));
 279:Src/bsp_driver_sd.c **** }
 280:Src/bsp_driver_sd.c **** 
 281:Src/bsp_driver_sd.c **** /**
 282:Src/bsp_driver_sd.c ****   * @brief  Get SD information about specific SD card.
 283:Src/bsp_driver_sd.c ****   * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 284:Src/bsp_driver_sd.c ****   */
 285:Src/bsp_driver_sd.c **** void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypedef* CardInfo)
 286:Src/bsp_driver_sd.c **** {
 287:Src/bsp_driver_sd.c ****   /* Get SD card Information */
 288:Src/bsp_driver_sd.c ****   HAL_SD_Get_CardInfo(&hsd, CardInfo);
 289:Src/bsp_driver_sd.c **** }
 290:Src/bsp_driver_sd.c **** /* USER CODE END 0 */
 291:Src/bsp_driver_sd.c **** 
 292:Src/bsp_driver_sd.c **** /**
 293:Src/bsp_driver_sd.c ****  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 294:Src/bsp_driver_sd.c ****  * @retval Returns if SD is detected or not
 295:Src/bsp_driver_sd.c ****  */
 296:Src/bsp_driver_sd.c **** uint8_t BSP_SD_IsDetected(void)
 297:Src/bsp_driver_sd.c **** {
 298:Src/bsp_driver_sd.c ****   __IO uint8_t status = SD_PRESENT;
  43              		.loc 1 298 0
  44 0004 0120     		movs	r0, #1
  45 0006 8DF80700 		strb	r0, [sp, #7]
ARM GAS  /tmp/cc0zaH7r.s 			page 7


 299:Src/bsp_driver_sd.c **** 
 300:Src/bsp_driver_sd.c ****   /* USER CODE BEGIN 1 */
 301:Src/bsp_driver_sd.c ****   /* user code can be inserted here */
 302:Src/bsp_driver_sd.c ****   /* USER CODE END 1 */    	
 303:Src/bsp_driver_sd.c **** 
 304:Src/bsp_driver_sd.c ****   return status;
  46              		.loc 1 304 0
  47 000a 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
  48              	.LBE5:
  49              	.LBE4:
  61:Src/bsp_driver_sd.c ****   {
  50              		.loc 1 61 0
  51 000e 8342     		cmp	r3, r0
  52 0010 02D0     		beq	.L6
  53              	.LVL1:
  54              	.L2:
  83:Src/bsp_driver_sd.c **** 
  55              		.loc 1 83 0
  56 0012 03B0     		add	sp, sp, #12
  57              	.LCFI2:
  58              		.cfi_remember_state
  59              		.cfi_def_cfa_offset 4
  60              		@ sp needed
  61 0014 5DF804FB 		ldr	pc, [sp], #4
  62              	.LVL2:
  63              	.L6:
  64              	.LCFI3:
  65              		.cfi_restore_state
  66:Src/bsp_driver_sd.c **** #ifdef BUS_4BITS
  66              		.loc 1 66 0
  67 0018 0749     		ldr	r1, .L7
  68 001a 0848     		ldr	r0, .L7+4
  69 001c FFF7FEFF 		bl	HAL_SD_Init
  70              	.LVL3:
  69:Src/bsp_driver_sd.c ****   {
  71              		.loc 1 69 0
  72 0020 0028     		cmp	r0, #0
  73 0022 F6D1     		bne	.L2
  72:Src/bsp_driver_sd.c ****     {
  74              		.loc 1 72 0
  75 0024 4FF40061 		mov	r1, #2048
  76 0028 0448     		ldr	r0, .L7+4
  77              	.LVL4:
  78 002a FFF7FEFF 		bl	HAL_SD_WideBusOperation_Config
  79              	.LVL5:
  63:Src/bsp_driver_sd.c ****   }
  80              		.loc 1 63 0
  81 002e 0030     		adds	r0, r0, #0
  82 0030 18BF     		it	ne
  83 0032 0120     		movne	r0, #1
  84 0034 EDE7     		b	.L2
  85              	.L8:
  86 0036 00BF     		.align	2
  87              	.L7:
  88 0038 00000000 		.word	SDCardInfo
  89 003c 00000000 		.word	hsd
  90              		.cfi_endproc
ARM GAS  /tmp/cc0zaH7r.s 			page 8


  91              	.LFE126:
  93              		.section	.text.BSP_SD_ITConfig,"ax",%progbits
  94              		.align	1
  95              		.p2align 2,,3
  96              		.global	BSP_SD_ITConfig
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	BSP_SD_ITConfig:
 103              	.LFB127:
  90:Src/bsp_driver_sd.c ****   /* TBI: add user code here depending on the hardware configuration used */
 104              		.loc 1 90 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
  94:Src/bsp_driver_sd.c **** 
 109              		.loc 1 94 0
 110 0000 0020     		movs	r0, #0
 111 0002 7047     		bx	lr
 112              		.cfi_endproc
 113              	.LFE127:
 115              		.section	.text.BSP_SD_DetectIT,"ax",%progbits
 116              		.align	1
 117              		.p2align 2,,3
 118              		.global	BSP_SD_DetectIT
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	BSP_SD_DetectIT:
 125              	.LFB128:
  99:Src/bsp_driver_sd.c ****   /* TBI: add user code here depending on the hardware configuration used */
 126              		.loc 1 99 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 7047     		bx	lr
 132              		.cfi_endproc
 133              	.LFE128:
 135 0002 00BF     		.section	.text.BSP_SD_DetectCallback,"ax",%progbits
 136              		.align	1
 137              		.p2align 2,,3
 138              		.weak	BSP_SD_DetectCallback
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	BSP_SD_DetectCallback:
 145              	.LFB129:
 106:Src/bsp_driver_sd.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 146              		.loc 1 106 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc0zaH7r.s 			page 9


 150              		@ link register save eliminated.
 151 0000 7047     		bx	lr
 152              		.cfi_endproc
 153              	.LFE129:
 155 0002 00BF     		.section	.text.BSP_SD_ReadBlocks,"ax",%progbits
 156              		.align	1
 157              		.p2align 2,,3
 158              		.global	BSP_SD_ReadBlocks
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv4-sp-d16
 164              	BSP_SD_ReadBlocks:
 165              	.LFB130:
 121:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 166              		.loc 1 121 0
 167              		.cfi_startproc
 168              		@ args = 8, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL6:
 121:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 171              		.loc 1 121 0
 172 0000 10B5     		push	{r4, lr}
 173              	.LCFI4:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 14, -4
 177 0002 82B0     		sub	sp, sp, #8
 178              	.LCFI5:
 179              		.cfi_def_cfa_offset 16
 121:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 180              		.loc 1 121 0
 181 0004 0499     		ldr	r1, [sp, #16]
 182 0006 059C     		ldr	r4, [sp, #20]
 123:Src/bsp_driver_sd.c ****   {
 183              		.loc 1 123 0
 184 0008 0091     		str	r1, [sp]
 185 000a 0194     		str	r4, [sp, #4]
 186 000c 0146     		mov	r1, r0
 187 000e 0448     		ldr	r0, .L14
 188              	.LVL7:
 189 0010 FFF7FEFF 		bl	HAL_SD_ReadBlocks
 190              	.LVL8:
 132:Src/bsp_driver_sd.c **** 
 191              		.loc 1 132 0
 192 0014 0030     		adds	r0, r0, #0
 193              	.LVL9:
 194 0016 18BF     		it	ne
 195 0018 0120     		movne	r0, #1
 196 001a 02B0     		add	sp, sp, #8
 197              	.LCFI6:
 198              		.cfi_def_cfa_offset 8
 199              		@ sp needed
 200 001c 10BD     		pop	{r4, pc}
 201              	.LVL10:
 202              	.L15:
 203 001e 00BF     		.align	2
ARM GAS  /tmp/cc0zaH7r.s 			page 10


 204              	.L14:
 205 0020 00000000 		.word	hsd
 206              		.cfi_endproc
 207              	.LFE130:
 209              		.section	.text.BSP_SD_WriteBlocks,"ax",%progbits
 210              		.align	1
 211              		.p2align 2,,3
 212              		.global	BSP_SD_WriteBlocks
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	BSP_SD_WriteBlocks:
 219              	.LFB131:
 143:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 220              		.loc 1 143 0
 221              		.cfi_startproc
 222              		@ args = 8, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              	.LVL11:
 225 0000 10B5     		push	{r4, lr}
 226              	.LCFI7:
 227              		.cfi_def_cfa_offset 8
 228              		.cfi_offset 4, -8
 229              		.cfi_offset 14, -4
 230 0002 82B0     		sub	sp, sp, #8
 231              	.LCFI8:
 232              		.cfi_def_cfa_offset 16
 143:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 233              		.loc 1 143 0
 234 0004 0499     		ldr	r1, [sp, #16]
 235 0006 059C     		ldr	r4, [sp, #20]
 145:Src/bsp_driver_sd.c ****   {
 236              		.loc 1 145 0
 237 0008 0091     		str	r1, [sp]
 238 000a 0194     		str	r4, [sp, #4]
 239 000c 0146     		mov	r1, r0
 240 000e 0448     		ldr	r0, .L18
 241              	.LVL12:
 242 0010 FFF7FEFF 		bl	HAL_SD_WriteBlocks
 243              	.LVL13:
 154:Src/bsp_driver_sd.c **** 
 244              		.loc 1 154 0
 245 0014 0030     		adds	r0, r0, #0
 246              	.LVL14:
 247 0016 18BF     		it	ne
 248 0018 0120     		movne	r0, #1
 249 001a 02B0     		add	sp, sp, #8
 250              	.LCFI9:
 251              		.cfi_def_cfa_offset 8
 252              		@ sp needed
 253 001c 10BD     		pop	{r4, pc}
 254              	.LVL15:
 255              	.L19:
 256 001e 00BF     		.align	2
 257              	.L18:
 258 0020 00000000 		.word	hsd
ARM GAS  /tmp/cc0zaH7r.s 			page 11


 259              		.cfi_endproc
 260              	.LFE131:
 262              		.section	.text.BSP_SD_ReadBlocks_DMA,"ax",%progbits
 263              		.align	1
 264              		.p2align 2,,3
 265              		.global	BSP_SD_ReadBlocks_DMA
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	BSP_SD_ReadBlocks_DMA:
 272              	.LFB132:
 165:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 273              		.loc 1 165 0
 274              		.cfi_startproc
 275              		@ args = 8, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              	.LVL16:
 278 0000 10B5     		push	{r4, lr}
 279              	.LCFI10:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 4, -8
 282              		.cfi_offset 14, -4
 283 0002 82B0     		sub	sp, sp, #8
 284              	.LCFI11:
 285              		.cfi_def_cfa_offset 16
 165:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 286              		.loc 1 165 0
 287 0004 0499     		ldr	r1, [sp, #16]
 288 0006 059C     		ldr	r4, [sp, #20]
 169:Src/bsp_driver_sd.c ****   {
 289              		.loc 1 169 0
 290 0008 0091     		str	r1, [sp]
 291 000a 0194     		str	r4, [sp, #4]
 292 000c 0146     		mov	r1, r0
 293 000e 0848     		ldr	r0, .L25
 294              	.LVL17:
 295 0010 FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 296              	.LVL18:
 297 0014 10B1     		cbz	r0, .L21
 298 0016 0120     		movs	r0, #1
 188:Src/bsp_driver_sd.c **** 
 299              		.loc 1 188 0
 300 0018 02B0     		add	sp, sp, #8
 301              	.LCFI12:
 302              		.cfi_remember_state
 303              		.cfi_def_cfa_offset 8
 304              		@ sp needed
 305 001a 10BD     		pop	{r4, pc}
 306              	.LVL19:
 307              	.L21:
 308              	.LCFI13:
 309              		.cfi_restore_state
 177:Src/bsp_driver_sd.c ****     {
 310              		.loc 1 177 0
 311 001c 0549     		ldr	r1, .L25+4
 312 001e 0448     		ldr	r0, .L25
ARM GAS  /tmp/cc0zaH7r.s 			page 12


 313 0020 FFF7FEFF 		bl	HAL_SD_CheckReadOperation
 314              	.LVL20:
 179:Src/bsp_driver_sd.c ****     }
 315              		.loc 1 179 0
 316 0024 0030     		adds	r0, r0, #0
 317 0026 18BF     		it	ne
 318 0028 0120     		movne	r0, #1
 319              	.LVL21:
 188:Src/bsp_driver_sd.c **** 
 320              		.loc 1 188 0
 321 002a 02B0     		add	sp, sp, #8
 322              	.LCFI14:
 323              		.cfi_def_cfa_offset 8
 324              		@ sp needed
 325 002c 10BD     		pop	{r4, pc}
 326              	.LVL22:
 327              	.L26:
 328 002e 00BF     		.align	2
 329              	.L25:
 330 0030 00000000 		.word	hsd
 331 0034 00E1F505 		.word	100000000
 332              		.cfi_endproc
 333              	.LFE132:
 335              		.section	.text.BSP_SD_WriteBlocks_DMA,"ax",%progbits
 336              		.align	1
 337              		.p2align 2,,3
 338              		.global	BSP_SD_WriteBlocks_DMA
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu fpv4-sp-d16
 344              	BSP_SD_WriteBlocks_DMA:
 345              	.LFB133:
 199:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 346              		.loc 1 199 0
 347              		.cfi_startproc
 348              		@ args = 8, pretend = 0, frame = 0
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350              	.LVL23:
 351 0000 10B5     		push	{r4, lr}
 352              	.LCFI15:
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 4, -8
 355              		.cfi_offset 14, -4
 356 0002 82B0     		sub	sp, sp, #8
 357              	.LCFI16:
 358              		.cfi_def_cfa_offset 16
 199:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 359              		.loc 1 199 0
 360 0004 0499     		ldr	r1, [sp, #16]
 361 0006 059C     		ldr	r4, [sp, #20]
 203:Src/bsp_driver_sd.c ****   {
 362              		.loc 1 203 0
 363 0008 0091     		str	r1, [sp]
 364 000a 0194     		str	r4, [sp, #4]
 365 000c 0146     		mov	r1, r0
 366 000e 0848     		ldr	r0, .L32
ARM GAS  /tmp/cc0zaH7r.s 			page 13


 367              	.LVL24:
 368 0010 FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 369              	.LVL25:
 370 0014 10B1     		cbz	r0, .L28
 371 0016 0120     		movs	r0, #1
 222:Src/bsp_driver_sd.c **** 
 372              		.loc 1 222 0
 373 0018 02B0     		add	sp, sp, #8
 374              	.LCFI17:
 375              		.cfi_remember_state
 376              		.cfi_def_cfa_offset 8
 377              		@ sp needed
 378 001a 10BD     		pop	{r4, pc}
 379              	.LVL26:
 380              	.L28:
 381              	.LCFI18:
 382              		.cfi_restore_state
 211:Src/bsp_driver_sd.c ****     {
 383              		.loc 1 211 0
 384 001c 0549     		ldr	r1, .L32+4
 385 001e 0448     		ldr	r0, .L32
 386 0020 FFF7FEFF 		bl	HAL_SD_CheckWriteOperation
 387              	.LVL27:
 213:Src/bsp_driver_sd.c ****     }
 388              		.loc 1 213 0
 389 0024 0030     		adds	r0, r0, #0
 390 0026 18BF     		it	ne
 391 0028 0120     		movne	r0, #1
 392              	.LVL28:
 222:Src/bsp_driver_sd.c **** 
 393              		.loc 1 222 0
 394 002a 02B0     		add	sp, sp, #8
 395              	.LCFI19:
 396              		.cfi_def_cfa_offset 8
 397              		@ sp needed
 398 002c 10BD     		pop	{r4, pc}
 399              	.LVL29:
 400              	.L33:
 401 002e 00BF     		.align	2
 402              	.L32:
 403 0030 00000000 		.word	hsd
 404 0034 00E1F505 		.word	100000000
 405              		.cfi_endproc
 406              	.LFE133:
 408              		.section	.text.BSP_SD_Erase,"ax",%progbits
 409              		.align	1
 410              		.p2align 2,,3
 411              		.global	BSP_SD_Erase
 412              		.syntax unified
 413              		.thumb
 414              		.thumb_func
 415              		.fpu fpv4-sp-d16
 417              	BSP_SD_Erase:
 418              	.LFB134:
 231:Src/bsp_driver_sd.c ****   uint8_t sd_state;
 419              		.loc 1 231 0
 420              		.cfi_startproc
ARM GAS  /tmp/cc0zaH7r.s 			page 14


 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              	.LVL30:
 424 0000 00B5     		push	{lr}
 425              	.LCFI20:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 14, -4
 428 0002 83B0     		sub	sp, sp, #12
 429              	.LCFI21:
 430              		.cfi_def_cfa_offset 16
 233:Src/bsp_driver_sd.c ****   {
 431              		.loc 1 233 0
 432 0004 CDE90023 		strd	r2, [sp]
 433 0008 0246     		mov	r2, r0
 434              	.LVL31:
 435 000a 0B46     		mov	r3, r1
 436 000c 0448     		ldr	r0, .L36
 437              	.LVL32:
 438 000e FFF7FEFF 		bl	HAL_SD_Erase
 439              	.LVL33:
 242:Src/bsp_driver_sd.c **** 
 440              		.loc 1 242 0
 441 0012 0030     		adds	r0, r0, #0
 442              	.LVL34:
 443 0014 18BF     		it	ne
 444 0016 0120     		movne	r0, #1
 445 0018 03B0     		add	sp, sp, #12
 446              	.LCFI22:
 447              		.cfi_def_cfa_offset 4
 448              		@ sp needed
 449 001a 5DF804FB 		ldr	pc, [sp], #4
 450              	.L37:
 451 001e 00BF     		.align	2
 452              	.L36:
 453 0020 00000000 		.word	hsd
 454              		.cfi_endproc
 455              	.LFE134:
 457              		.section	.text.BSP_SD_IRQHandler,"ax",%progbits
 458              		.align	1
 459              		.p2align 2,,3
 460              		.global	BSP_SD_IRQHandler
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv4-sp-d16
 466              	BSP_SD_IRQHandler:
 467              	.LFB135:
 248:Src/bsp_driver_sd.c ****   HAL_SD_IRQHandler(&hsd);
 468              		.loc 1 248 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              		@ link register save eliminated.
 249:Src/bsp_driver_sd.c **** }
 473              		.loc 1 249 0
 474 0000 0148     		ldr	r0, .L39
 475 0002 FFF7FEBF 		b	HAL_SD_IRQHandler
ARM GAS  /tmp/cc0zaH7r.s 			page 15


 476              	.LVL35:
 477              	.L40:
 478 0006 00BF     		.align	2
 479              	.L39:
 480 0008 00000000 		.word	hsd
 481              		.cfi_endproc
 482              	.LFE135:
 484              		.section	.text.BSP_SD_DMA_Tx_IRQHandler,"ax",%progbits
 485              		.align	1
 486              		.p2align 2,,3
 487              		.global	BSP_SD_DMA_Tx_IRQHandler
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu fpv4-sp-d16
 493              	BSP_SD_DMA_Tx_IRQHandler:
 494              	.LFB136:
 256:Src/bsp_driver_sd.c ****   HAL_DMA_IRQHandler(hsd.hdmatx); 
 495              		.loc 1 256 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 257:Src/bsp_driver_sd.c **** }
 500              		.loc 1 257 0
 501 0000 014B     		ldr	r3, .L42
 502 0002 D86D     		ldr	r0, [r3, #92]
 503 0004 FFF7FEBF 		b	HAL_DMA_IRQHandler
 504              	.LVL36:
 505              	.L43:
 506              		.align	2
 507              	.L42:
 508 0008 00000000 		.word	hsd
 509              		.cfi_endproc
 510              	.LFE136:
 512              		.section	.text.BSP_SD_DMA_Rx_IRQHandler,"ax",%progbits
 513              		.align	1
 514              		.p2align 2,,3
 515              		.global	BSP_SD_DMA_Rx_IRQHandler
 516              		.syntax unified
 517              		.thumb
 518              		.thumb_func
 519              		.fpu fpv4-sp-d16
 521              	BSP_SD_DMA_Rx_IRQHandler:
 522              	.LFB137:
 264:Src/bsp_driver_sd.c ****   HAL_DMA_IRQHandler(hsd.hdmarx);
 523              		.loc 1 264 0
 524              		.cfi_startproc
 525              		@ args = 0, pretend = 0, frame = 0
 526              		@ frame_needed = 0, uses_anonymous_args = 0
 527              		@ link register save eliminated.
 265:Src/bsp_driver_sd.c **** }
 528              		.loc 1 265 0
 529 0000 014B     		ldr	r3, .L45
 530 0002 986D     		ldr	r0, [r3, #88]
 531 0004 FFF7FEBF 		b	HAL_DMA_IRQHandler
 532              	.LVL37:
ARM GAS  /tmp/cc0zaH7r.s 			page 16


 533              	.L46:
 534              		.align	2
 535              	.L45:
 536 0008 00000000 		.word	hsd
 537              		.cfi_endproc
 538              	.LFE137:
 540              		.section	.text.BSP_SD_GetStatus,"ax",%progbits
 541              		.align	1
 542              		.p2align 2,,3
 543              		.global	BSP_SD_GetStatus
 544              		.syntax unified
 545              		.thumb
 546              		.thumb_func
 547              		.fpu fpv4-sp-d16
 549              	BSP_SD_GetStatus:
 550              	.LFB138:
 277:Src/bsp_driver_sd.c ****   return(HAL_SD_GetStatus(&hsd));
 551              		.loc 1 277 0
 552              		.cfi_startproc
 553              		@ args = 0, pretend = 0, frame = 0
 554              		@ frame_needed = 0, uses_anonymous_args = 0
 555              		@ link register save eliminated.
 278:Src/bsp_driver_sd.c **** }
 556              		.loc 1 278 0
 557 0000 0148     		ldr	r0, .L48
 558 0002 FFF7FEBF 		b	HAL_SD_GetStatus
 559              	.LVL38:
 560              	.L49:
 561 0006 00BF     		.align	2
 562              	.L48:
 563 0008 00000000 		.word	hsd
 564              		.cfi_endproc
 565              	.LFE138:
 567              		.section	.text.BSP_SD_GetCardInfo,"ax",%progbits
 568              		.align	1
 569              		.p2align 2,,3
 570              		.global	BSP_SD_GetCardInfo
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu fpv4-sp-d16
 576              	BSP_SD_GetCardInfo:
 577              	.LFB139:
 286:Src/bsp_driver_sd.c ****   /* Get SD card Information */
 578              		.loc 1 286 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 583              	.LVL39:
 288:Src/bsp_driver_sd.c **** }
 584              		.loc 1 288 0
 585 0000 0146     		mov	r1, r0
 586 0002 0148     		ldr	r0, .L51
 587              	.LVL40:
 588 0004 FFF7FEBF 		b	HAL_SD_Get_CardInfo
 589              	.LVL41:
ARM GAS  /tmp/cc0zaH7r.s 			page 17


 590              	.L52:
 591              		.align	2
 592              	.L51:
 593 0008 00000000 		.word	hsd
 594              		.cfi_endproc
 595              	.LFE139:
 597              		.section	.text.BSP_SD_IsDetected,"ax",%progbits
 598              		.align	1
 599              		.p2align 2,,3
 600              		.global	BSP_SD_IsDetected
 601              		.syntax unified
 602              		.thumb
 603              		.thumb_func
 604              		.fpu fpv4-sp-d16
 606              	BSP_SD_IsDetected:
 607              	.LFB140:
 297:Src/bsp_driver_sd.c ****   __IO uint8_t status = SD_PRESENT;
 608              		.loc 1 297 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 8
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613 0000 82B0     		sub	sp, sp, #8
 614              	.LCFI23:
 615              		.cfi_def_cfa_offset 8
 298:Src/bsp_driver_sd.c **** 
 616              		.loc 1 298 0
 617 0002 0123     		movs	r3, #1
 618 0004 8DF80730 		strb	r3, [sp, #7]
 619              		.loc 1 304 0
 620 0008 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 305:Src/bsp_driver_sd.c **** }
 621              		.loc 1 305 0
 622 000c 02B0     		add	sp, sp, #8
 623              	.LCFI24:
 624              		.cfi_def_cfa_offset 0
 625              		@ sp needed
 626 000e 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE140:
 630              		.text
 631              	.Letext0:
 632              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 633              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 634              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 635              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 636              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 637              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 638              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 639              		.file 9 "/usr/lib/gcc/arm-none-eabi/6.3.0/include/stddef.h"
 640              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 641              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 642              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 643              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_sdmmc.h"
 644              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sd.h"
ARM GAS  /tmp/cc0zaH7r.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_driver_sd.c
     /tmp/cc0zaH7r.s:18     .text.BSP_SD_Init:0000000000000000 $t
     /tmp/cc0zaH7r.s:26     .text.BSP_SD_Init:0000000000000000 BSP_SD_Init
     /tmp/cc0zaH7r.s:88     .text.BSP_SD_Init:0000000000000038 $d
     /tmp/cc0zaH7r.s:94     .text.BSP_SD_ITConfig:0000000000000000 $t
     /tmp/cc0zaH7r.s:102    .text.BSP_SD_ITConfig:0000000000000000 BSP_SD_ITConfig
     /tmp/cc0zaH7r.s:116    .text.BSP_SD_DetectIT:0000000000000000 $t
     /tmp/cc0zaH7r.s:124    .text.BSP_SD_DetectIT:0000000000000000 BSP_SD_DetectIT
     /tmp/cc0zaH7r.s:136    .text.BSP_SD_DetectCallback:0000000000000000 $t
     /tmp/cc0zaH7r.s:144    .text.BSP_SD_DetectCallback:0000000000000000 BSP_SD_DetectCallback
     /tmp/cc0zaH7r.s:156    .text.BSP_SD_ReadBlocks:0000000000000000 $t
     /tmp/cc0zaH7r.s:164    .text.BSP_SD_ReadBlocks:0000000000000000 BSP_SD_ReadBlocks
     /tmp/cc0zaH7r.s:205    .text.BSP_SD_ReadBlocks:0000000000000020 $d
     /tmp/cc0zaH7r.s:210    .text.BSP_SD_WriteBlocks:0000000000000000 $t
     /tmp/cc0zaH7r.s:218    .text.BSP_SD_WriteBlocks:0000000000000000 BSP_SD_WriteBlocks
     /tmp/cc0zaH7r.s:258    .text.BSP_SD_WriteBlocks:0000000000000020 $d
     /tmp/cc0zaH7r.s:263    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 $t
     /tmp/cc0zaH7r.s:271    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 BSP_SD_ReadBlocks_DMA
     /tmp/cc0zaH7r.s:330    .text.BSP_SD_ReadBlocks_DMA:0000000000000030 $d
     /tmp/cc0zaH7r.s:336    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 $t
     /tmp/cc0zaH7r.s:344    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 BSP_SD_WriteBlocks_DMA
     /tmp/cc0zaH7r.s:403    .text.BSP_SD_WriteBlocks_DMA:0000000000000030 $d
     /tmp/cc0zaH7r.s:409    .text.BSP_SD_Erase:0000000000000000 $t
     /tmp/cc0zaH7r.s:417    .text.BSP_SD_Erase:0000000000000000 BSP_SD_Erase
     /tmp/cc0zaH7r.s:453    .text.BSP_SD_Erase:0000000000000020 $d
     /tmp/cc0zaH7r.s:458    .text.BSP_SD_IRQHandler:0000000000000000 $t
     /tmp/cc0zaH7r.s:466    .text.BSP_SD_IRQHandler:0000000000000000 BSP_SD_IRQHandler
     /tmp/cc0zaH7r.s:480    .text.BSP_SD_IRQHandler:0000000000000008 $d
     /tmp/cc0zaH7r.s:485    .text.BSP_SD_DMA_Tx_IRQHandler:0000000000000000 $t
     /tmp/cc0zaH7r.s:493    .text.BSP_SD_DMA_Tx_IRQHandler:0000000000000000 BSP_SD_DMA_Tx_IRQHandler
     /tmp/cc0zaH7r.s:508    .text.BSP_SD_DMA_Tx_IRQHandler:0000000000000008 $d
     /tmp/cc0zaH7r.s:513    .text.BSP_SD_DMA_Rx_IRQHandler:0000000000000000 $t
     /tmp/cc0zaH7r.s:521    .text.BSP_SD_DMA_Rx_IRQHandler:0000000000000000 BSP_SD_DMA_Rx_IRQHandler
     /tmp/cc0zaH7r.s:536    .text.BSP_SD_DMA_Rx_IRQHandler:0000000000000008 $d
     /tmp/cc0zaH7r.s:541    .text.BSP_SD_GetStatus:0000000000000000 $t
     /tmp/cc0zaH7r.s:549    .text.BSP_SD_GetStatus:0000000000000000 BSP_SD_GetStatus
     /tmp/cc0zaH7r.s:563    .text.BSP_SD_GetStatus:0000000000000008 $d
     /tmp/cc0zaH7r.s:568    .text.BSP_SD_GetCardInfo:0000000000000000 $t
     /tmp/cc0zaH7r.s:576    .text.BSP_SD_GetCardInfo:0000000000000000 BSP_SD_GetCardInfo
     /tmp/cc0zaH7r.s:593    .text.BSP_SD_GetCardInfo:0000000000000008 $d
     /tmp/cc0zaH7r.s:598    .text.BSP_SD_IsDetected:0000000000000000 $t
     /tmp/cc0zaH7r.s:606    .text.BSP_SD_IsDetected:0000000000000000 BSP_SD_IsDetected
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_SD_Init
HAL_SD_WideBusOperation_Config
SDCardInfo
hsd
HAL_SD_ReadBlocks
HAL_SD_WriteBlocks
HAL_SD_ReadBlocks_DMA
HAL_SD_CheckReadOperation
HAL_SD_WriteBlocks_DMA
HAL_SD_CheckWriteOperation
HAL_SD_Erase
ARM GAS  /tmp/cc0zaH7r.s 			page 19


HAL_SD_IRQHandler
HAL_DMA_IRQHandler
HAL_SD_GetStatus
HAL_SD_Get_CardInfo
